{"version":3,"sources":["assets/styles.js","components/PageTitle.js","components/Card.js","components/FortuneTellerCard.js","views/FortuneTellers.js","App.js","serviceWorker.js","index.js"],"names":["colors","spacing","boxShadow","base","border","PageTitle","styled","h1","Card","div","StyledFortuneTellerCard","StyledCard","StyledImage","img","Label","label","Row","Col","props","size","onClick","console","log","FortuneTellerCard","data","onclick","src","foto","nome","descricao","fortuneTellers","id","StyledFortuneTellers","FortuneTellers","map","fortuneTeller","key","StyledApp","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kPAAMA,G,MAEO,WAFPA,EAKI,OALJA,EAMG,OAGHC,EACE,OADFA,EAEG,SAGHC,EAAY,CAChBC,KAAK,mBAAD,OAXI,SAgBJC,EAAS,CACbD,KAAK,aAAD,OAAeH,I,2HClBrB,IAMeK,EANGC,IAAOC,GAAV,IAEJP,EACQC,G,kICHnB,IAMeO,EANFF,IAAOG,IAAV,IFeW,MEbLP,EAAUC,KACdC,EAAOD,M,0nBCDnB,IAAMO,EAA0BJ,IAAOG,IAAV,KAGvBE,EAAaL,YAAOE,EAAPF,CAAH,IACHL,EACMA,GAIbW,EAAcN,IAAOO,IAAV,IAECZ,GAGZa,EAAQR,IAAOS,MAAV,IHSF,OGPEf,GAILgB,EAAMV,IAAOG,IAAV,KAIHQ,EAAMX,IAAOG,IAAV,KACO,SAAAS,GAAK,OAAIA,EAAMC,KAAO,MAGhCC,EAAU,kBAAMC,QAAQC,IAAI,yCAqBnBC,EAnBW,SAAC,GAAD,IAAEC,EAAF,EAAEA,KAAF,OACxB,kBAACd,EAAD,KACE,kBAACC,EAAD,CAAYc,QAASL,GACnB,kBAACJ,EAAD,KACE,kBAACJ,EAAD,CAAac,IAAKF,EAAKG,OACvB,kBAACX,EAAD,KACE,kBAACC,EAAD,CAAKE,KAAK,MACR,kBAACL,EAAD,cAEF,8BAAOU,EAAKI,MACZ,kBAACX,EAAD,CAAKE,KAAK,MACR,kBAACL,EAAD,yBAEF,8BAAOU,EAAKK,gB,qEC1CtB,IAAMC,EAAiB,CACrB,CACEC,GAAI,EACJH,KAAM,eACNC,UAAW,8BACXF,KAAM,2LAER,CACEI,GAAI,EACJH,KAAM,iBACNC,UAAW,0BACXF,KAAM,4LAIJK,EAAuB1B,IAAOG,IAAV,KAcXwB,EAPQ,kBACrB,kBAACD,EAAD,KACE,kBAAC,EAAD,sBANKF,EAAeI,KAAI,SAAAC,GAAa,OACrC,kBAAC,EAAD,CAAmBC,IAAKD,EAAcJ,GAAIP,KAAMW,S,wFCnBpD,IAAME,EAAY/B,IAAOG,IAAV,IACFR,GAWEqC,MARf,WACE,OACE,kBAACD,EAAD,KACI,kBAAC,EAAD,QCDYE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.3b272766.chunk.js","sourcesContent":["const colors = {\n  primary: '#000',\n  secondary: '#b82a28',\n  white: '#fff',\n  shadow: '#777',\n  border: '#ccc',\n  label: '#333',\n};\n\nconst spacing = {\n  base: '1rem',\n  small: '0.5rem',\n};\n\nconst boxShadow = {\n  base: `1px 1px 5px 0px ${colors.shadow}`,\n};\n\nconst borderRadius = '2px';\n\nconst border = {\n  base: `1px solid ${colors.border}`,\n};\n\nconst fontSize = {\n  base: '1rem',\n  small: '.5rem',\n  tiny: '.25rem',\n  label: '12px',\n};\n\nexport {\n  colors,\n  spacing,\n  boxShadow,\n  borderRadius,\n  border,\n  fontSize,\n};","import styled from 'styled-components';\nimport {colors, spacing} from '../assets/styles';\n\nconst PageTitle = styled.h1`\n  margin: 0;\n  color: ${colors.secondary};\n  margin-bottom: ${spacing.small};\n`;\n\nexport default PageTitle;","import styled from 'styled-components';\nimport {borderRadius, boxShadow, border} from '../assets/styles';\n\nconst Card = styled.div`\n  border-radius: ${borderRadius};\n  box-shadow: ${boxShadow.base};\n  border: ${border.base};\n`;\n\nexport default Card;","import styled from 'styled-components';\nimport React from 'react';\nimport Card from '../components/Card';\nimport {spacing, fontSize, colors} from '../assets/styles';\n\nconst StyledFortuneTellerCard = styled.div`\n`;\n\nconst StyledCard = styled(Card)`\n  padding: ${spacing.small};\n  margin-bottom: ${spacing.small};\n  cursor: pointer;\n`\n\nconst StyledImage = styled.img`\n  width: 100px;\n  margin-right: ${spacing.small}\n`;\n\nconst Label = styled.label`\n  font-size: ${fontSize.label};\n  color: ${colors.label};\n  font-weight: bold;\n`;\n\nconst Row = styled.div`\n  display: inline-block;\n`;\n\nconst Col = styled.div`\n  width: calc(${props => props.size / 12} * 100%);\n`;\n\nconst onClick = () => console.log('Você selecionou um(a) cartomante!');\n\nconst FortuneTellerCard = ({data}) => \n  <StyledFortuneTellerCard>\n    <StyledCard onclick={onClick}>\n      <Row>\n        <StyledImage src={data.foto} />\n        <Row>\n          <Col size=\"12\">\n            <Label>Nome</Label>\n          </Col>\n          <span>{data.nome}</span>\n          <Col size=\"12\">\n            <Label>Descrição</Label>\n          </Col>\n          <span>{data.descricao}</span>\n        </Row>\n      </Row>\n    </StyledCard>\n  </StyledFortuneTellerCard>\n\nexport default FortuneTellerCard;","import React from 'react';\nimport styled from 'styled-components';\n\nimport PageTitle from '../components/PageTitle';\nimport FortuneTellerCard from '../components/FortuneTellerCard';\n\nconst fortuneTellers = [\n  {\n    id: 1,\n    nome: 'João Bidu',\n    descricao: 'Especialista em mapa astral',\n    foto: 'https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Fyt3.ggpht.com%2F-U50BfESRpFw%2FAAAAAAAAAAI%2FAAAAAAAAAAA%2FN41Rm0tOYV8%2Fs900-c-k-no-mo-rj-c0xffffff%2Fphoto.jpg&f=1&nofb=1',\n  },\n  {\n    id: 2,\n    nome: 'Walter Mercado',\n    descricao: 'Especialista em tarô',\n    foto: 'https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Fyt3.ggpht.com%2F-nhyJJS9k_dE%2FAAAAAAAAAAI%2FAAAAAAAAAAA%2Fl1PFnq1QpwM%2Fs900-c-k-no-mo-rj-c0xffffff%2Fphoto.jpg&f=1&nofb=1',\n  },\n]\n\nconst StyledFortuneTellers = styled.div``;\n\nconst renderFortuneTellers = () => {\n  return fortuneTellers.map(fortuneTeller => \n    <FortuneTellerCard key={fortuneTeller.id} data={fortuneTeller}/>);\n}\n\nconst FortuneTellers = () => (\n  <StyledFortuneTellers>\n    <PageTitle>Profissionais</PageTitle>\n    {renderFortuneTellers()}\n  </StyledFortuneTellers>\n);\n\nexport default FortuneTellers;","import React from 'react';\nimport styled from 'styled-components';\nimport './App.css';\nimport FortuneTellers from './views/FortuneTellers';\nimport {spacing} from './assets/styles';\n\nconst StyledApp = styled.div`\n  padding: ${spacing.base};\n`\n\nfunction App() {\n  return (\n    <StyledApp>\n        <FortuneTellers />\n    </StyledApp>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}